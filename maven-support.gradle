
/**
 * Common Gradle script configuration for projects that need to publish to
 * Maven repositories.
 * 
 * @author Emanuel Rabina
 */

apply plugin: 'signing'

project.ext.artifact = ''
project.ext.year     = ''

/**
 * Introduce a 'provided' configuration.
 */
configurations {
	provided
	compile.extendsFrom(provided)
}

/**
 * Generate the pom.xml file.
 */
def generatePom() {
	def pom = pom {
		project {
			artifactId    project.artifact
			packaging     'jar'
			name          project.name
			description   project.description
			url           "http://www.ultraq.net.nz/programming/${project.artifact}/"
			inceptionYear project.year
			licenses {
				license {
					name         'The Apache Software License, Version 2.0'
					url          'http://www.apache.org/licenses/LICENSE-2.0.txt'
					distribution 'repo'
				}
			}
			scm {
				url                 "scm:git:git@github.com:ultraq/${project.artifact}.git"
				connection          "scm:git:git@github.com:ultraq/${project.artifact}.git"
				developerConnection "scm:git:git@github.com:ultraq/${project.artifact}.git"
			}
			developers {
				developer {
					id    'emanuelrabina'
					name  'Emanuel Rabina'
					url   'http://www.ultraq.net.nz/'
					roles {
						role 'author'
						role 'developer'
					}
					timezone '+12'
				}
			}
			dependencies {
				configurations.provided.dependencies.each { dep ->
					dependency {
						groupId    dep.group
						artifactId dep.name
						version    dep.version
						scope      'provided'
					}
				}
			}
		}
	}
}

/**
 * Write the pom files included in the JAR for distribution to a Maven
 * repository.
 */
task writePoms {
	ext.pomXml        = file("${project.mavenPomDir}/pom.xml")
	ext.pomProperties = file("${project.mavenPomDir}/pom.properties")
	inputs.file(project.buildFile)
	outputs.files(pomXml, pomProperties)
	doLast {
		generatePom().writeTo(pomXml)
		pomProperties.withWriter { out ->
			out.println '#Generated using Gradle'
			out.println '#' + new Date().format('EEE MMM dd HH:mm:ss zzz yyyy')
			out.println "version=${project.version}"
			out.println "groupId=${project.group}"
			out.println "artifactId=${project.artifact}"
		}
	}
}

/**
 * Reconfigure the JAR task to include the pom files normally generated by
 * Maven.
 */
jar {
	dependsOn writePoms
	doFirst {
		metaInf {
			from("${project.mavenPomDir}")
			into("maven/${project.group}/${project.artifact}")
			include('pom.*')
		}
	}
}

/**
 * Create the source file archive (JAR).
 */
task sourcesJar(type: Jar, dependsOn: classes) {
	doFirst {
		baseName = "${project.artifact}"
	}
	classifier = 'sources'
	from sourceSets.main.allSource
}

/**
 * Create the javadoc archive.
 */
task javadocJar(type: Jar, dependsOn: javadoc) {
	doFirst {
		baseName = "${project.artifact}"
	}
	classifier = 'javadoc'
	from javadoc.destinationDir
}

/**
 * Include source and javadoc JARs as part of the release.
 */
artifacts {
	archives sourcesJar, javadocJar
}

/**
 * Sign all JARs for Maven central.
 */
signing {
	sign configurations.archives
}

/**
 * Used for testing, upload everything to the local repository.
 */
install {
	doFirst {
		repositories.mavenDeployer.pom = generatePom()
	}
	repositories.mavenDeployer {
		configuration = configurations.archives
		repository(url: 'file:///' + System.properties['user.home'] + '/.m2/repository/')
		beforeDeployment { MavenDeployment deployment ->
			signing.signPom(deployment)
		}
	}
}

/**
 * Upload everything to Maven central.
 */
uploadArchives {
	doFirst {
		repositories.mavenDeployer.pom = generatePom()
	}
	repositories.mavenDeployer {
		configuration = configurations.archives
		repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
			authentication(userName: sonatypeUsername, password: sonatypePassword)
		}
		snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
			authentication(userName: sonatypeUsername, password: sonatypePassword)
		}
		beforeDeployment { MavenDeployment deployment ->
			signing.signPom(deployment)
		}
	}
}
