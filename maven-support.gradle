
/**
 * Common Gradle script configuration for projects that need to publish to
 * Maven repositories.
 * 
 * @author Emanuel Rabina
 */

apply plugin: 'signing'

project.ext.website       = ''
project.ext.author        = ''
project.ext.authorEmail   = ''
project.ext.authorWebsite = ''
project.ext.year          = ''

/**
 * Generate the pom.xml file.
 */
def generatePom() {
	pom {
		project {
			artifactId    project.artifact
			packaging     'jar'
			name          project.name
			description   project.description
			url           project.website
			inceptionYear project.year
			licenses {
				license {
					name         'The Apache Software License, Version 2.0'
					url          'http://www.apache.org/licenses/LICENSE-2.0.txt'
					distribution 'repo'
				}
			}
			scm {
				url                 "scm:git:git@github.com:ultraq/${project.artifact}.git"
				connection          "scm:git:git@github.com:ultraq/${project.artifact}.git"
				developerConnection "scm:git:git@github.com:ultraq/${project.artifact}.git"
			}
			developers {
				developer {
					id    'emanuelrabina'
					name  project.author
					email project.authorEmail
					url   project.authorWebsite
					roles {
						role 'author'
						role 'developer'
					}
					timezone '+12'
				}
			}
		}
	}
}

/**
 * Write the pom files included in the JAR for distribution to a Maven
 * repository.
 */
task writePoms {
	onlyIf {
		def pom = file("${project.mavenPomDir}/pom.xml");
		!pom.exists() || pom.lastModified() < project.buildFile.lastModified()
	}
	doLast {
		generatePom().writeTo("${project.mavenPomDir}/pom.xml")

		file("${project.mavenPomDir}/pom.properties").withWriter { out ->
			out.println '#Generated using Gradle'
			out.println '#' + new Date().format('EEE MMM dd HH:mm:ss zzz yyyy')
			out.println "version=${project.version}"
			out.println "groupId=${project.group}"
			out.println "artifactId=${project.artifact}"
		}
	}
}

/**
 * Reconfigure the JAR task to include the pom files normally generated by
 * Maven.
 */
jar {
	dependsOn writePoms
	metaInf {
		from("${project.mavenPomDir}")
		into("maven/${project.group}/${project.artifact}")
		include('pom.*')
	}
}

/**
 * Create the source file archive (JAR).
 */
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

/**
 * Create the javadoc archive.
 */
task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

/**
 * Include source and javadoc JARs as part of the release.
 */
artifacts {
	archives sourcesJar, javadocJar
}

/**
 * Sign all JARs for Maven central.
 */
signing {
	sign configurations.archives
}

/**
 * Used for testing, upload everything to the local repository.
 */
install {
	repositories.mavenDeployer {
		configuration = configurations.archives
		repository(url: 'file:///' + System.properties['user.home'] + '/.m2/repository/')
		pom = generatePom()
		beforeDeployment { MavenDeployment deployment ->
			signing.signPom(deployment)
		}
	}
}

/**
 * Upload everything to Maven central.
 */
uploadArchives {
	repositories.mavenDeployer {
		configuration = configurations.archives
		repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
			authentication(userName: sonatypeUsername, password: sonatypePassword)
		}
		pom = generatePom()
		beforeDeployment { MavenDeployment deployment ->
			signing.signPom(deployment)
		}
	}
}
